// Code generated by gin-swagger; DO NOT EDIT.

package {{ .APIPackage }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
	"strings"

	"golang.org/x/oauth2"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	{{range .DefaultImports}}{{printf "%q" .}}
	{{end}}
	{{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
	{{end}}
)

// Routes defines all the routes of the Server service.
type Routes struct {
	*gin.Engine
	{{range .Operations}}{{ pascalize .Name }} struct {
		*gin.RouterGroup
	}
{{end}}
}

// healthHandler is the health HTTP handler used for the /.well-known/health
// route if enabled.
func healthHandler(healthFunc func() bool) gin.HandlerFunc {
	healthy := healthFunc
	return func(ctx *gin.Context) {
			health := struct {
				Health bool `json:"health"`
			}{
				Health: healthy(),
			}

			if !health.Health {
				ctx.JSON(http.StatusServiceUnavailable, &health)
			} else {
				ctx.JSON(http.StatusOK, &health)
			}
	}
}

// Service is the interface that must be implemented in order to provide
// business logic for the Server service.
type HealthyUsercase interface {
	Healthy() bool
}
{{range .OperationGroups}}
type {{ pascalize .Name }}Usercase interface {
	{{range .Operations}}{{ pascalize .Name }}(ctx *gin.Context{{ if .Params }}, params *{{.Package}}.{{ pascalize .Name }}Params{{ end }}) *app.Response
{{end}}
}
{{end}}


func ginizePath(path string) string {
	return strings.Replace(strings.Replace(path, "{", ":", -1), "}", "", -1)
}

// NewRoutes initializes the route structure for the Server service.
func NewRoutes(engine *gin.Engine,ha HealthyUsercase, {{range .OperationGroups}}{{.Name}}Usercase {{ pascalize .Name }}Usercase ,{{end}}) *Routes {
	routes := &Routes{Engine: engine}
	{{range .Operations}}routes.{{ pascalize .Name }}.RouterGroup = routes.Group("{{ .BasePath }}")
	{{ if and (ne .Method "GET") .HasBodyParams }}routes.{{ pascalize .Name }}.RouterGroup.Use(middleware.ContentTypes({{range $index, $typ := .ConsumesMediaTypes}}{{if $index}},{{end}}"{{$typ}}"{{end}}))
{{ end }}
{{end}}
    routes.configureRoutes(ha, {{range .OperationGroups}}{{.Name}}Usercase ,{{end}})
	return routes
}


// configureRoutes configures the routes for the Server service.
// Configuring of routes includes setting up Auth if it is enabled.
func (r *Routes) configureRoutes(ha HealthyUsercase, {{range .OperationGroups}}{{.Name}}Usercase {{ pascalize .Name }}Usercase ,{{end}}) {
	// setup all service routes after the authenticate middleware has been
	// initialized.
	{{range .Operations}}r.{{ pascalize .Name }}.{{.Method}}(ginizePath({{printf "%q" .Path}}), {{.Package}}.{{ pascalize .Name }}Endpoint({{.Package}}Usercase.{{ pascalize .Name }}))
{{end}}
    // configure healthz endpoint
    r.GET("/healthz", healthHandler(ha.Healthy))
    r.GET("/swagger.json", func(ctx *gin.Context) {
        ctx.String(http.StatusOK, string(SwaggerJSON))
    })
}

// vim: ft=go