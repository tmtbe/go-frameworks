// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	cachestore "test/internal/pkg/cachestore"

	context2 "context"

	gin "github.com/gin-gonic/gin"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	viper "github.com/spf13/viper"

	zap "go.uber.org/zap"
)

// InfraContext is an autogenerated mock type for the InfraContext type
type InfraContext struct {
	mock.Mock
}

// GetCacheStore provides a mock function with given fields:
func (_m *InfraContext) GetCacheStore() cachestore.Store {
	ret := _m.Called()

	var r0 cachestore.Store
	if rf, ok := ret.Get(0).(func() cachestore.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cachestore.Store)
		}
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *InfraContext) GetConfig() *viper.Viper {
	ret := _m.Called()

	var r0 *viper.Viper
	if rf, ok := ret.Get(0).(func() *viper.Viper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viper.Viper)
		}
	}

	return r0
}

// GetContext provides a mock function with given fields:
func (_m *InfraContext) GetContext() context2.Context {
	ret := _m.Called()

	var r0 context2.Context
	if rf, ok := ret.Get(0).(func() context2.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context2.Context)
		}
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *InfraContext) GetDB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetGormDB provides a mock function with given fields:
func (_m *InfraContext) GetGormDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetLog provides a mock function with given fields:
func (_m *InfraContext) GetLog() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// GetRoute provides a mock function with given fields:
func (_m *InfraContext) GetRoute() *gin.Engine {
	ret := _m.Called()

	var r0 *gin.Engine
	if rf, ok := ret.Get(0).(func() *gin.Engine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}

	return r0
}
