// Code generated by gin-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"strings"

	"test/gen/restapi/operations/pet"
	"test/gen/restapi/operations/user"
	"test/internal/pkg/app"
	"test/internal/pkg/transports/middleware"

	"github.com/gin-gonic/gin"
)

// Routes defines all the routes of the Server service.
type Routes struct {
	*gin.Engine
	GetPets struct {
		*gin.RouterGroup
	}
	GetUsersUserID struct {
		*gin.RouterGroup
	}
	PostUser struct {
		*gin.RouterGroup
	}
}

// healthHandler is the health HTTP handler used for the /.well-known/health
// route if enabled.
func healthHandler(healthFunc func() bool) gin.HandlerFunc {
	healthy := healthFunc
	return func(ctx *gin.Context) {
		health := struct {
			Health bool `json:"health"`
		}{
			Health: healthy(),
		}

		if !health.Health {
			ctx.JSON(http.StatusServiceUnavailable, &health)
		} else {
			ctx.JSON(http.StatusOK, &health)
		}
	}
}

// Service is the interface that must be implemented in order to provide
// business logic for the Server service.
type HealthyUsercase interface {
	Healthy() bool
}

type PetUsercase interface {
	GetPets(ctx *gin.Context, params *pet.GetPetsParams) *app.Response
}

type UserUsercase interface {
	GetUsersUserID(ctx *gin.Context, params *user.GetUsersUserIDParams) *app.Response
	PostUser(ctx *gin.Context, params *user.PostUserParams) *app.Response
}

func ginizePath(path string) string {
	return strings.Replace(strings.Replace(path, "{", ":", -1), "}", "", -1)
}

// NewRoutes initializes the route structure for the Server service.
func NewRoutes(engine *gin.Engine, ha HealthyUsercase, petUsercase PetUsercase, userUsercase UserUsercase) *Routes {
	routes := &Routes{Engine: engine}
	routes.GetPets.RouterGroup = routes.Group("")

	routes.GetUsersUserID.RouterGroup = routes.Group("")

	routes.PostUser.RouterGroup = routes.Group("")
	routes.PostUser.RouterGroup.Use(middleware.ContentTypes("application/json"))

	routes.configureRoutes(ha, petUsercase, userUsercase)
	return routes
}

// configureRoutes configures the routes for the Server service.
// Configuring of routes includes setting up Auth if it is enabled.
func (r *Routes) configureRoutes(ha HealthyUsercase, petUsercase PetUsercase, userUsercase UserUsercase) {
	// setup all service routes after the authenticate middleware has been
	// initialized.
	r.GetPets.GET(ginizePath("/pets"), pet.GetPetsEndpoint(petUsercase.GetPets))
	r.GetUsersUserID.GET(ginizePath("/users"), user.GetUsersUserIDEndpoint(userUsercase.GetUsersUserID))
	r.PostUser.POST(ginizePath("/user"), user.PostUserEndpoint(userUsercase.PostUser))

	// configure healthz endpoint
	r.GET("/healthz", healthHandler(ha.Healthy))
	r.GET("/swagger.json", func(ctx *gin.Context) {
		ctx.String(http.StatusOK, string(SwaggerJSON))
	})
}

// vim: ft=go
