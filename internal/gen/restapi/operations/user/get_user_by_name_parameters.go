// Code generated by gin-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"test/internal/pkg/app"

	"github.com/gin-gonic/gin"
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
)

// GetUserByNameEndpoint executes the core logic of the related
// route endpoint.
func GetUserByNameEndpoint(handler func(ctx *gin.Context, params *GetUserByNameParams) *app.Response) gin.HandlerFunc {
	return func(ctx *gin.Context) {

		// generate params from request
		params := NewGetUserByNameParams()
		err := params.readRequest(ctx)
		if err != nil {
			errObj := err.(*errors.CompositeError)
			problem := app.Problem{
				Title:  "Unprocessable Entity.",
				Status: int(errObj.Code()),
				Detail: errObj.Error(),
			}

			ctx.Writer.Header().Set("Content-Type", "application/problem+json")
			ctx.JSON(problem.Status, problem)
			return
		}

		resp := handler(ctx, params)
		switch resp.Code {
		case http.StatusNoContent:
			ctx.AbortWithStatus(resp.Code)
		default:
			ctx.JSON(resp.Code, resp.Body)
		}
	}
}

// NewGetUserByNameParams creates a new GetUserByNameParams object
// with the default values initialized.
func NewGetUserByNameParams() *GetUserByNameParams {
	var ()
	return &GetUserByNameParams{}
}

// GetUserByNameParams contains all the bound params for the get user by name operation
// typically these are obtained from a http.Request
//
// swagger:parameters getUserByName
type GetUserByNameParams struct {

	/*The name that needs to be fetched. Use user1 for testing.
	  Required: true
	  In: path
	*/
	Username string
}

// readRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetUserByNameParams) readRequest(ctx *gin.Context) error {
	var res []error
	formats := strfmt.NewFormats()

	rUsername := []string{ctx.Param("username")}
	if err := o.bindUsername(rUsername, true, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserByNameParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Username = raw

	return nil
}

// vim: ft=go
