// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	app2 "test/internal/app"
	context2 "test/internal/app/context"
	"test/internal/app/module1/application"
	"test/internal/app/module1/domain/services"
	"test/internal/app/module1/infrastructure/repos"
	"test/internal/app/module1/interfaces/apis"
	"test/internal/gen/restapi"
	"test/internal/pkg"
	"test/internal/pkg/app"
	"test/internal/pkg/cachestore"
	"test/internal/pkg/config"
	"test/internal/pkg/context"
	"test/internal/pkg/database"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/internal/pkg/redis"
	"test/internal/pkg/telemetry"
	"test/internal/pkg/transports"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, func(), error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, nil, err
	}
	appOptions, err := app2.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	transportsOptions, err := transports.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	engine := transports.NewGin(transportsOptions, logger)
	healthyApplicationImpl := application.NewHealthyApplicationImpl()
	userApplicationImpl := application.NewUserApplicationImpl()
	routes := restapi.NewRoutes(engine, healthyApplicationImpl, userApplicationImpl)
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	db, err := database.NewSqlDb(databaseOptions)
	if err != nil {
		return nil, nil, err
	}
	init, err := migrate.NewInit(viper, databaseOptions, migrationOptions, db, logger)
	if err != nil {
		return nil, nil, err
	}
	contextContext := context.NewContext()
	telemetryOptions, err := telemetry.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	telemetryInit, cleanup := telemetry.NewInit(contextContext, telemetryOptions, logger, engine)
	gormDB, err := database.NewGormDb(db, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := redis.NewRedis(contextContext, redisOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisStore := cachestore.NewRedisCache(client)
	appInfraContext := &context.AppInfraContext{
		MigrateInit:   init,
		TelemetryInit: telemetryInit,
		Config:        viper,
		Log:           logger,
		Route:         engine,
		GormDB:        gormDB,
		DB:            db,
		CacheStore:    redisStore,
		Context:       contextContext,
	}
	api := apis.NewAPI(logger, appInfraContext)
	postgresDetailRepository := repos.NewPostgresDetailsRepository(logger, gormDB)
	postgresUserRepository := repos.NewPostgresUserRepository(logger, gormDB)
	userDetailServiceImpl := services.NewUserDetailServiceImpl(logger, postgresDetailRepository, postgresUserRepository)
	userDetailApplication := application.NewUserDetailsApplication(logger, userDetailServiceImpl)
	userDetailAPI := apis.NewUserDetailAPI(api, userDetailApplication)
	appContext := &context2.AppContext{
		Routes:                routes,
		InfraContext:          appInfraContext,
		UserDetailAPI:         userDetailAPI,
		UserDetailApplication: userDetailApplication,
		UserRepository:        postgresUserRepository,
		DetailRepository:      postgresDetailRepository,
		UserDetailService:     userDetailServiceImpl,
	}
	server, cleanup2, err := transports.NewServer(transportsOptions, logger, engine)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appApplication, cleanup3, err := app2.NewApp(appOptions, appContext, logger, server)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return appApplication, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var providerSet = wire.NewSet(pkg.ProviderSet, app2.ProviderSet)
